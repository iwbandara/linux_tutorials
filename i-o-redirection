# I/O Redirection

# I/O redirection enables the user to redirect information from or to a command by using a text file.

# The standard input (stdin or channel 0) of the command is considered to be the keyboard and the standard output (stdout or channel 1) is considered the screen. There is
also another channel that is meant to redirect error output (stderr or channel 2) of a command or a program’s error messages. The input and/or output can be redirected.

# Standard Output

    To redirect standard output to a file, instead of the screen, we need to use the '>' operator followed by the name of the file. 
    
    If the file doesn’t exist, a new one will be created, otherwise, the information will overwrite the existing file.

    $ echo "Hello World!" > text # add the "Hello World" text into the file 'text'. There will be no output on the screen.

    $ echo "Hello!" > text # this command will overwrite content on the file 'text' with "Hello!"

# If you want to append the content at the end of the file, use '>>' operator.

    $ echo "This is the next line." >> text # this add the text into the file.

# Standard Error

    In order to redirect just the error messages, a user will need to employ the '2>' operator followed by the name of the file in which the errors will be written.

    $ find /usr games 2> text-error # if any error messages will be store in the file 'text-error'.

    As well as the standard output, the standard error can also be appended to a file with the '2>>' operator.
 
    $ find /usr games 2>> text-error # if any error, it will be append to the text-error file.

# There is one particular file that technically is a bit bucket (a file that accepts input and doesn’t do anything with it): /dev/null.

    $ find /usr games 2> /dev/null
    
# Standard Input
    
    This type of redirection is used to input data to a command, from a specified file instead of a keyboard. In this case the '<' operator is used.

    $ cat < text-error # display the file content on the screen.

    Redirecting standard input is usually used with commands that don’t accept file arguments. The 'tr' command is one of them.

    $ tr -d "l" < text-error # the output will be shown after deleting the occurances of letter 'l' from the file content.
# Here Documents

    Unlike the output redirections, the << operator acts in a different way compared to the other operators. This input stream is also called here document.

    $ cat << hello
    > hey
    > ola
    > hello
    hey
    ola

# Combinations
    
    The first combination that we will explore combines the redirection of the standard output and standard error output to the same file. 
    
    The '&>' and '&>>' operators are used, '&' representing the combination of channel 1 and channel 2.

    $ find /usr admin &> error.log # add the output including any error to a file created as error.log.

    $ find /usr admin &>> error.log # append the output to the error.log file.
